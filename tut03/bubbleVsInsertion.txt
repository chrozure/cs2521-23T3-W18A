Let's compare the performance of bubble sort vs insertion sort!

Bubble Sort:
    - iterate through the array
    - if you find two adjacent numbers that are in decreasing order:
        - swap them around
    - repeat until the array is sorted

    - Best case: sorted O(n)
    - Worst case: reverse-sorted O(n^2)

Insertion sort:
    - create a 'vertical line' where everything to the left of it is sorted
    - iterate through the array, and at each element:
        - shift it towards the left so that the array on the left of the line is sorted

    - Best case: sorted O(n)
    - Worst case: reverse-sorted O(n^2)



1. Sorted input
Bubble sort:
    1 2 3 4 5

    O(n) - very fast

Insertion sort:
    1 2 3 4 5

    O(n) - very fast


2. Reverse-sorted
Bubble sort:
    5 4 3 2 1

    O(n^2) - very slow

Insertion sort:
    5 4 3 2 1

    O(n^2) - very slow


3. Sorted, except the first and last elements are swapped
Bubble sort:

Iteration 1:
    5 2 3 4 1
    2 5 3 4 1
    2 3 5 4 1
    2 3 4 5 1
    2 3 4 1 5

Iteration 2:
    2 3 4 1 5
    2 3 1 4 5

Iteration 3:
    2 3 1 4 5
    2 1 3 4 5

Iteration 4:
    2 1 3 4 5
    1 2 3 4 5

Requires (n-1) iterations of the whole array.

    O(n^2)

Insertion sort:
    5 2 3 4 1

First iteration:
    5 2 3 4 1
    2 5 3 4 1
    2 3 5 4 1
    2 3 4 5 1
    2 3 4 1 5 (now move 1 all the way to the start)
    2 3 1 4 5
    2 1 3 4 5
    1 2 3 4 5

    O(n)
